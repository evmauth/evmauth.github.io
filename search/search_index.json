{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EVMAuth","text":"<p>An open protocol to enable secure authorization in a simple, standard way for applications, APIs, and AI agents.</p>"},{"location":"#overview","title":"Overview","text":"<p>EVMAuth is an advanced implementation of the ERC-1155 token standard that enables robust EVM-based authorization.</p> <ul> <li>Drastically Reduced Infrastructure: Eliminate the need for complex auth systems, user databases, and billing infrastructure, removing entire categories of technical debt from your codebase</li> <li>AI-Ready Architecture: Make your API instantly accessible to AI agents that cannot navigate traditional registration flows, opening your service to the next wave of digital economy growth</li> <li>Built-In Security: Replace permanent API keys with time-limited access tokens that naturally expire, dramatically reducing your attack surface without complex key rotation policies</li> <li>Seamless Monetization: For paid APIs, access purchases happen directly through the contract with instant settlement\u2014no payment processors, invoicing, or collection issues</li> <li>Flexible Access Control: Offer different permission levels, durations, and price points with a tiered access control system that gives you precise control over API consumption</li> </ul>"},{"location":"#repositories","title":"Repositories","text":"<ul> <li>evmauth-core: Solidity EVMAuth contract.</li> <li>evmauth-ts: TypeScript SDK for interacting with EVMAuth contracts.</li> </ul>"},{"location":"#core-architecture","title":"Core Architecture","text":"<p>The EVMAuth contract is built with a modular architecture, extending several specialized contracts to provide a comprehensive feature set. The contract follows a hierarchical inheritance pattern:</p> graph TD %% Custom styling with colors     classDef openZeppelin fill:#9cf, stroke:#333, stroke-width:2px, color:black     classDef accessControl fill:#c9f, stroke:#333, stroke-width:2px, color:black     classDef base fill:#fc9, stroke:#333, stroke-width:2px, color:black     classDef evmAuth fill:#f96, stroke:#333, stroke-width:2px, color:black      A[EVMAuth]:::evmAuth     B[EVMAuthExpiringERC1155]:::base     C[EVMAuthPurchasableERC1155]:::base     D[EVMAuthBaseERC1155]:::base     D2[OpenZeppelin ERC1155]:::openZeppelin     E[EVMAuthAccessControl]:::accessControl     E2[OpenZeppelin AccessControlDefaultAdminRules]:::openZeppelin     E3[OpenZeppelin AccessControl]:::openZeppelin  %% Relationships with styled edges     E3 --&gt; E2     E2 --&gt; E     D2 --&gt; D     E --&gt; D     D --&gt; C     C --&gt; B     B --&gt; A  %% Add a title     subgraph \"EVMAuth Contract Inheritance Hierarchy\"     end"},{"location":"#evmauthaccesscontrol","title":"EVMAuthAccessControl","text":"<p>This base layer extends OpenZeppelin's <code>AccessControlDefaultAdminRules</code> to add:</p> <ul> <li>Role-based access control</li> <li>Account blacklisting functionality</li> <li>Methods to grant and revoke multiple roles in a single transaction</li> </ul>"},{"location":"#evmauthbaseerc1155","title":"EVMAuthBaseERC1155","text":"<p>Building on the base access control, this layer adds:</p> <ul> <li>ERC-1155 multi-token standard compliance</li> <li>Token metadata management (active/inactive, burnable, transferable)</li> <li>Incremental token ID generation</li> <li>Separate roles for token management, minting, and burning</li> </ul>"},{"location":"#evmauthpurchasableerc1155","title":"EVMAuthPurchasableERC1155","text":"<p>This extension adds financial functionality:</p> <ul> <li>Direct token purchases via EVM-compatible wallets</li> <li>Wallet and fund management capabilities</li> <li>Role for finance management</li> <li>Price configuration for different token types</li> <li>Sales monitoring via <code>TokenPurchased</code> events</li> </ul>"},{"location":"#evmauthexpiringerc1155","title":"EVMAuthExpiringERC1155","text":"<p>This extension adds automatic token expiration functionality:</p> <ul> <li>Time-to-live (TTL) settings for tokens</li> <li>Automated token expiration and burning</li> <li>Grouping of tokens by expiration timestamp</li> <li>First-in-first-out (FIFO) burning and transferal of expiring tokens</li> </ul>"},{"location":"#evmauth_1","title":"EVMAuth","text":"<p>The final implementation brings everything together with:</p> <ul> <li>Unified methods for setting and getting token metadata</li> <li>Events for tracking token metadata creation and changes</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ol> <li> <p>EVM-Based Access Control: Grant and revoke permissions using ownership of specific tokens</p> </li> <li> <p>Expiration Mechanics: Tokens can have fixed durations, enabling subscription-like models</p> </li> <li> <p>Direct Purchase: Users can buy access tokens directly from the contract (if a token is active and has a price set)</p> </li> <li> <p>Cross-Chain Consistency: Deployed using ERC-2470 Singleton Factory for predictable addresses across EVMs</p> </li> <li> <p>Blacklisting: Ability to block malicious accounts from interacting with the system</p> </li> <li> <p>Role Management: Pre-defined roles for blacklisting, finance, token management, minting, and burning</p> </li> </ol>"},{"location":"#practical-applications","title":"Practical Applications","text":"<p>This contract suite enables:</p> <ul> <li> <p>API Access Management: Create and sell API access tokens without having to store them in a database</p> </li> <li> <p>Subscription Services: Implement renewable access with automatic and precise expiration</p> </li> <li> <p>Metered Resource Access: Sell tokens that can be redeemed for storage, network, or compute resources</p> </li> <li> <p>Cross-Chain Identity: Maintain consistent authentication and authorization across multiple EVMs</p> </li> <li> <p>Token Gating: Control access to digital or physical resources based on token ownership</p> </li> </ul>"},{"location":"#deployment-operation","title":"Deployment &amp; Operation","text":"<p>The contract includes a deployment script using the ERC-2470 Singleton Factory for cross-chain consistency. This ensures the contract deploys to the same address across different EVMs when using the same parameters.</p> <p>Key operational functions include:</p> <ul> <li>Setting token metadata (active/inactive, burnable, transferable, price, TTL)</li> <li>Monitoring token sales</li> <li>Verifying token ownership</li> <li>Handling token expiration</li> </ul>"},{"location":"#security-considerations","title":"Security Considerations","text":"<p>The contract implements several security measures:</p> <ul> <li>Non-reentrancy guards for financial functions</li> <li>Comprehensive role-based access controls</li> <li>Blacklisting capabilities for compromised accounts</li> <li>Delayed contract ownership transfer mechanism</li> </ul>"},{"location":"#license","title":"License","text":"<p>The EVMAuth contract, SDKs, and libraries are released under the open source MIT License.</p>"}]}